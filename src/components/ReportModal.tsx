import { useState, useEffect } from 'react';
import { Button } from './ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from './ui/dialog';
import { Input } from './ui/input';
import { Textarea } from './ui/textarea';
import { Card, CardContent } from './ui/card';

interface ReportModalProps {
  isOpen: boolean;
  onClose: () => void;
  reportData: any;
  userName: string;
  onNestedModalChange?: (isOpen: boolean) => void;
}

export function ReportModal({ isOpen, onClose, reportData, userName, onNestedModalChange }: ReportModalProps) {
  const [showPdfModal, setShowPdfModal] = useState(false);
  const [showEmailModal, setShowEmailModal] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [editedReport, setEditedReport] = useState('');
  
  // Generate formatted report
  const generateReport = () => {
    const currentDate = new Date().toLocaleDateString();
    const currentTime = new Date().toLocaleTimeString();
    
    if (reportData.title) {
      // Written report format
      return `INCIDENT REPORT
Generated on: ${currentDate} at ${currentTime}
Report ID: INC-${Date.now()}

===== BASIC INFORMATION =====
Title: ${reportData.title}
Reported By: ${reportData.reportedBy}
Date: ${reportData.date}
Time: ${reportData.time}
Location: ${reportData.location}

===== INCIDENT DETAILS =====
Type: ${reportData.incidentType}
Equipment/System: ${reportData.equipment}
Description: ${reportData.description}
Error Messages: ${reportData.errorMessages}
${reportData.imageDescription ? `\nImage Analysis: ${reportData.imageDescription}` : ''}

===== IMPACT ANALYSIS =====
Services Affected: ${reportData.servicesAffected}
Impact Level: ${reportData.impactLevel}
Users Affected: ${reportData.usersAffected}
Business Impact: ${reportData.businessImpact}

===== RESPONSE & RESOLUTION =====
Immediate Actions: ${reportData.immediateActions}
Resolution Steps: ${reportData.resolutionSteps}
Resolution Date/Time: ${reportData.resolutionDateTime}
Team Involved: ${reportData.teamInvolved}

===== PREVENTION & FOLLOW-UP =====
Root Cause: ${reportData.rootCause}
Preventative Measures: ${reportData.preventativeMeasures}
Follow-Up Tasks: ${reportData.followUpTasks}

---
This report was generated using CBRE AI Incident Reporter.
Generated by: ${userName}`;
    } else {
      // Vocal report format
      return `INCIDENT REPORT
Generated on: ${currentDate} at ${currentTime}
Report ID: INC-${Date.now()}

===== INCIDENT SUMMARY =====
Title: ${reportData.title || 'Voice-Generated Incident Report'}
Reported By: ${userName}
Location: ${reportData.location || 'N/A'}

===== INCIDENT DETAILS =====
Type: ${reportData.incident_type || 'N/A'}
Description: ${reportData.description || 'N/A'}

===== IMPACT & RESPONSE =====
Impact: ${reportData.impact || 'N/A'}
Immediate Actions: ${reportData.actions || 'N/A'}
Resolution: ${reportData.resolution || 'N/A'}

===== PREVENTION =====
Preventative Measures: ${reportData.prevention || 'N/A'}

---
This report was generated using CBRE AI Incident Reporter (Voice Mode).
Generated by: ${userName}`;
    }
  };

  const report = generateReport();
  
  // Initialize edited report when modal opens
  useEffect(() => {
    if (isOpen) {
      setEditedReport(report);
    }
  }, [isOpen]);

  // Notify parent when nested modals open/close
  useEffect(() => {
    if (onNestedModalChange) {
      const anyNestedModalOpen = showPdfModal || showEmailModal;
      onNestedModalChange(anyNestedModalOpen);
    }
  }, [showPdfModal, showEmailModal, onNestedModalChange]);

  const handleEditToggle = () => {
    if (!isEditMode) {
      setEditedReport(report);
    }
    setIsEditMode(!isEditMode);
  };

  const handleSaveEdit = () => {
    setIsEditMode(false);
    // The editedReport state now contains the modified content
  };

  const handleCancelEdit = () => {
    setEditedReport(generateReport()); // Reset to fresh original
    setIsEditMode(false);
  };

  const currentReport = editedReport || report;

  const copyToClipboard = () => {
    navigator.clipboard.writeText(currentReport);
    // You could add a toast notification here
  };

  const generatePDF = () => {
    setShowPdfModal(true);
  };

  const draftEmail = () => {
    setShowEmailModal(true);
  };

  const downloadPDF = () => {
    // Mock PDF generation
    const blob = new Blob([currentReport], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `incident-report-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    setShowPdfModal(false);
  };

  const shareReport = () => {
    if (navigator.share) {
      navigator.share({
        title: 'Incident Report',
        text: currentReport,
      });
    } else {
      copyToClipboard();
    }
    setShowPdfModal(false);
  };

  const emailSubject = `Incident Report - ${reportData.title || 'System Incident'} - ${new Date().toLocaleDateString()}`;
  const emailBody = `Dear Stakeholders,

Please find below the incident report for the recent system issue:

INCIDENT SUMMARY:
- Title: ${reportData.title || 'System Incident'}
- Date: ${reportData.date || new Date().toLocaleDateString()}
- Impact Level: ${reportData.impactLevel || 'TBD'}
- Status: ${reportData.resolutionDateTime ? 'Resolved' : 'In Progress'}

KEY DETAILS:
${reportData.description || reportData.description || 'See attached detailed report for full information.'}

IMPACT:
${reportData.businessImpact || reportData.impact || 'Impact assessment in progress.'}

RESOLUTION:
${reportData.resolutionSteps || reportData.resolution || 'Resolution steps documented in detailed report.'}

Please refer to the complete incident report for comprehensive details.

Best regards,
${userName}
CBRE IT Team

---
This email was generated using CBRE AI Incident Reporter.`;

  const copyEmailSubject = () => {
    navigator.clipboard.writeText(emailSubject);
  };

  const copyEmailBody = () => {
    navigator.clipboard.writeText(emailBody);
  };

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center justify-center space-x-2">
              <div className="w-8 h-8 bg-primary rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <span>Generated Incident Report</span>
            </DialogTitle>
            <DialogDescription>
              Review and download your comprehensive incident report generated by CBRE AI.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            <Card className="bg-slate-50">
              <div className="flex items-center justify-between p-4 border-b border-slate-200">
                <h3 className="font-medium text-slate-700">Incident Report Content</h3>
                <div className="flex items-center space-x-2">
                  {isEditMode ? (
                    <>
                      <Button
                        onClick={handleSaveEdit}
                        size="sm"
                        className="rounded-lg bg-primary hover:bg-primary/90 text-white flex items-center space-x-1"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        <span>Save</span>
                      </Button>
                      <Button
                        onClick={handleCancelEdit}
                        size="sm"
                        variant="outline"
                        className="rounded-lg border-slate-300 hover:border-slate-400"
                      >
                        Cancel
                      </Button>
                    </>
                  ) : (
                    <Button
                      onClick={handleEditToggle}
                      size="sm"
                      variant="outline"
                      className="rounded-lg border-slate-300 hover:border-slate-400 flex items-center space-x-1"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                      </svg>
                      <span>Edit</span>
                    </Button>
                  )}
                </div>
              </div>
              <CardContent className="p-6">
                {isEditMode ? (
                  <Textarea
                    value={editedReport}
                    onChange={(e) => setEditedReport(e.target.value)}
                    className="min-h-96 w-full text-sm font-mono border-slate-300 focus:border-primary focus:ring-primary resize-none"
                    placeholder="Edit your incident report..."
                  />
                ) : (
                  <pre className="whitespace-pre-wrap text-sm text-slate-800 font-mono overflow-x-auto">
                    {currentReport}
                  </pre>
                )}
              </CardContent>
            </Card>
            
            <div className="grid grid-cols-2 gap-4 max-w-lg mx-auto">
              <Button
                onClick={generatePDF}
                className="rounded-xl bg-primary hover:bg-primary/90 text-white flex items-center space-x-2"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <span>PDF Report</span>
              </Button>
              
              <Button
                onClick={draftEmail}
                variant="outline"
                className="rounded-xl border-2 border-primary text-primary hover:bg-primary hover:text-white flex items-center space-x-2"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
                <span>Email ✨</span>
              </Button>
              
              <Button
                onClick={copyToClipboard}
                variant="outline"
                className="rounded-xl border-2 border-slate-200 hover:border-slate-300 flex items-center space-x-2"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                </svg>
                <span>Copy Report</span>
              </Button>
              
              <Button
                onClick={onClose}
                variant="outline"
                className="rounded-xl border-2 border-slate-200 hover:border-slate-300"
              >
                Close
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* PDF Options Modal */}
      <Dialog open={showPdfModal} onOpenChange={setShowPdfModal}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle className="flex items-center justify-center space-x-2">
              <div className="w-8 h-8 bg-primary rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
              </div>
              <span>Your PDF Report is Ready</span>
            </DialogTitle>
            <DialogDescription>
              Choose how you would like to save or share your PDF incident report.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            
            <div className="space-y-3">
              <Button
                onClick={downloadPDF}
                className="w-full h-12 rounded-xl bg-primary hover:bg-primary/90 text-white flex items-center justify-center space-x-2"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <span>Save Locally</span>
              </Button>
              
              <Button
                onClick={shareReport}
                variant="outline"
                className="w-full h-12 rounded-xl border-2 border-slate-200 hover:border-slate-300 flex items-center justify-center space-x-2"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                </svg>
                <span>Share</span>
              </Button>
              
              <Button
                onClick={() => setShowPdfModal(false)}
                variant="outline"
                className="w-full h-12 rounded-xl border-2 border-slate-200 hover:border-slate-300"
              >
                Go Back
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Email Draft Modal */}
      <Dialog open={showEmailModal} onOpenChange={setShowEmailModal}>
        <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-primary rounded-lg flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                </svg>
              </div>
              <span>Draft Stakeholder Email</span>
            </DialogTitle>
            <DialogDescription>
              Copy the subject line and email body to communicate with stakeholders about this incident.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-6">
            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="text-sm font-medium text-slate-700">Subject Line</label>
                <Button
                  onClick={copyEmailSubject}
                  variant="ghost"
                  size="sm"
                  className="text-xs"
                >
                  Copy Subject
                </Button>
              </div>
              <Input
                value={emailSubject}
                readOnly
                className="rounded-xl border-2 border-slate-200 bg-slate-50"
              />
            </div>
            
            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="text-sm font-medium text-slate-700">Email Body</label>
                <Button
                  onClick={copyEmailBody}
                  variant="ghost"
                  size="sm"
                  className="text-xs"
                >
                  Copy Body
                </Button>
              </div>
              <Textarea
                value={emailBody}
                readOnly
                className="min-h-64 rounded-xl border-2 border-slate-200 bg-slate-50 font-mono text-sm"
              />
            </div>
            
            <div className="flex justify-center">
              <Button
                onClick={() => setShowEmailModal(false)}
                className="rounded-xl bg-primary hover:bg-primary/90 text-white"
              >
                Close
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}